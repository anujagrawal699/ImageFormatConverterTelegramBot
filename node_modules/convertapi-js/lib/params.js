import Param from "./param";
import FileParam, { FileValue } from "./file-param";
import FilesParam, { FilesValue } from "./files-param";
export default class Params {
    constructor(host, init) {
        this.host = host;
        this.params = [];
        let param;
        init === null || init === void 0 ? void 0 : init.forEach(p => {
            if (p.isFile) {
                if (typeof (p.value) === 'string') {
                    param = new FileParam(p.name, new FileValue('', p.value), this.host);
                }
                else {
                    param = p.value instanceof Array
                        ? new FilesParam(p.name, p.value, this.host)
                        : param = new FileParam(p.name, p.value, this.host);
                }
            }
            else {
                param = new Param(p.name, p.value);
            }
            this.params.push(param);
        });
    }
    add(name, value) {
        let param;
        if (value instanceof FilesValue || value instanceof FileList || value instanceof Array) {
            param = new FilesParam(name, value, this.host);
        }
        else if (value instanceof FileValue || value instanceof File || value instanceof URL) {
            param = new FileParam(name, value, this.host);
        }
        else {
            param = new Param(name, value);
        }
        this.params.push(param);
        return param;
    }
    get(name) {
        return this.params.find(p => p.name === name);
    }
    delete(name) {
        let idx = this.params.findIndex(p => p.name === name);
        return this.params.splice(idx, 1)[0];
    }
    get dto() {
        let dtoPros = this.params.map(p => p.dto);
        return Promise.all(dtoPros).then(ds => ({ Parameters: ds }));
    }
}
//# sourceMappingURL=params.js.map