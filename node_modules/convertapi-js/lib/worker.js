export function worker(worker, params) {
    let paramPros = params instanceof HTMLFormElement
        ? Array.from(new FormData(params).entries()).map(pair => resolveParam(pair[0], pair[1]))
        : Object.keys(params).map(k => resolveParam(k, params[k]));
    return Promise.all(paramPros).then(p => fetch(worker.href, {
        method: 'POST',
        headers: {
            'content-type': 'application/json;charset=UTF-8',
            'convertapi-params': 'true'
        },
        body: JSON.stringify(p)
    }));
}
function resolveParam(name, value) {
    let valPro;
    let isFile;
    if (value instanceof File) {
        valPro = upload(value);
        isFile = true;
    }
    else if (value instanceof FileList || value instanceof Array) {
        valPro = uploadMulti(value);
        isFile = true;
    }
    else {
        valPro = Promise.resolve(value);
    }
    return valPro.then(v => ({
        name: name,
        value: v,
        isFile: isFile
    }));
}
function uploadMulti(value) {
    let dtoPros = Array.from(value).filter(f => f instanceof File).map(upload);
    return Promise.all(dtoPros);
}
function upload(f) {
    return fetch(`https://v2.convertapi.com/upload?filename=${f.name}`, { method: 'POST', body: f })
        .then(resp => resp.status === 200 ? resp.json() : Promise.reject(`File ${f.name} upload has failed with the status code ${resp.status}`))
        .then(dto => dto.FileId);
}
//# sourceMappingURL=worker.js.map